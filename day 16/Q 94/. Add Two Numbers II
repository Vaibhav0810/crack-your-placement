
class Solution {
public:
    
    ListNode* reverse(ListNode* rev){
        
        ListNode* curr=rev;
        ListNode* prv=NULL;
        
        while(curr){
            ListNode* Next=curr->next; 
            curr->next=prv;
            prv=curr;
            curr=Next;
        }
        rev=prv; 
        return rev;
    }
    
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        // int count1=0,count2=0;
        // ListNode* temp1=l1;
        // ListNode* temp2=l2;
        if(!l1 and !l2)return NULL;
        if(!l1)return l2;
        if(!l2)return l1;
//         while(temp1){
//             count1++;
//             temp1=temp1->next;
//         }
        
//         while(temp2){
//             count2++;
//             temp2=temp2->next;
//         }
//         temp1=l1;
//         temp2=l2;
        
//         int diff= abs(count1-count2);
        
//         if(count1<count2){
//             while(diff--){
//                 ListNode* add=new ListNode(0);
//                 add->next=temp1;
//                 temp1=add;
//             }
//         }
//         else{
//              while(diff--){
//                 ListNode* add=new ListNode(0);
//                 add->next=temp2;
//                 temp2=add;
//             }
//         }
        
        l1=reverse(l1);
        l2=reverse(l2);
        
        ListNode* dummy=new ListNode(0);
        ListNode* temp=dummy;
        int carry=0;
        while(l1 || l2 || carry==1){
            int sum=0;
            if(l1){
                sum=sum+l1->val;
                l1=l1->next;
            }
            if(l2){
                sum=sum+l2->val;
                l2=l2->next;
            }
            sum=sum+carry;
            carry=sum/10;
            ListNode* node=new ListNode(sum%10);
            temp->next=node;
            temp=temp->next;
        }
        return reverse(dummy->next);
        return dummy;
    }
};
