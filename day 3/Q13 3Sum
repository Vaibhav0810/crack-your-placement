
// O(n^3)

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
      
        
        
        vector<vector<int>>ans;
        vector<int>subset;
        
        for(int i=0;i<nums.size()-2;i++){ 
            for(int j=i+1;j<nums.size()-1;j++){
                for(int k=j+1;k<nums.size();k++){
                    if(nums[i]+nums[j]+nums[k]==0){
                        subset.push_back(nums[i]);
                        subset.push_back(nums[j]);
                        subset.push_back(nums[k]);
                        sort(subset.begin(),subset.end());
                        if(find(ans.begin(),ans.end(),subset)==ans.end())
                        ans.push_back(subset);
                        
                    }
                    subset.clear();
                }
            }
        }
        return ans;
        
    }
};

// optimised  O(n^2)

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        
           vector<vector<int>>ans;
        
        if(nums.size()<=2){
            return ans;
        }
        
        sort(nums.begin(),nums.end());
        
     
       
        
        for(int i=0;i<nums.size()-2;i++){
            
            if(i==0 || (i>0 &&nums[i]!=nums[i-1])){ 
                  int low=i+1;
                  int high=nums.size()-1;
            
            while(low<high){
            if(nums[low]+nums[high]==-nums[i]){
              vector<int>temp;
                temp.push_back(nums[i]);
                temp.push_back(nums[low]);
                temp.push_back(nums[high]);
                ans.push_back(temp);
            
                while(low<high && nums[low]==nums[low+1]) low++;
                while(low<high && nums[high]==nums[high-1]) high--;
            
                low++,high--;
            }
            
            else if(nums[low]+nums[high]<nums[i]){
                low++;
            }
            else{
                high++;
            }
        }
        }
        }
        return ans;
        }

        
        
    
};

