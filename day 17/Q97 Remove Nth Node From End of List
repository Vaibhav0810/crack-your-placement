Two pass 
Time comp=O(2*n)

class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        
        if(head==NULL){
            return NULL;
        }
        
        
        ListNode* temp=head;
        int count=0;
        
        while(temp){
            count++;
            temp=temp->next;
        }
        temp=head;
        if(n==count){
            return head->next;
        }
        
        
        int removeafter=count-n;
        while(removeafter){
            if(removeafter==1){
                temp->next=temp->next->next;
                return head;
            }
            removeafter--;
            temp=temp->next;
        }
        return head;
    }
};

2. One pass
Time Comp O(n)

ListNode* removeNthFromEnd(ListNode* head, int n) {
	ListNode *fast = head, *slow = head;
	while(n--) fast = fast -> next;      // iterate first n nodes using fast
	if(!fast) return head -> next;       // if fast is already null, it means we have to delete head itself. So, just return next of head
	while(fast -> next)                  // iterate till fast reaches the last node of list
		fast = fast -> next, slow = slow -> next;            
	slow -> next = slow -> next -> next; // remove the nth node from last
	return head;
}
