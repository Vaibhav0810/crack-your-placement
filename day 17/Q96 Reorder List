O(n) & O(n) stack based

class Solution {
public:
    void reorderList(ListNode* head) {
         if ((!head) || (!head->next) || (!head->next->next)) return;
        stack<ListNode*>s;
        
        ListNode* temp=head;
        int count=0;
        while(temp){
            s.push(temp);
            temp=temp->next;
            count++;
        }
        
        temp=head;
        int count2=0;
        
        for(int i=0;i<count/2;i++){
            ListNode* element=s.top();
            s.pop();
            element->next=temp->next;
            temp->next=element;
            temp=temp->next->next;
        }
        
        temp->next=NULL;
        
    }
};

without stack O(n) & O(1)

class Solution {
public:
    void reorderList(ListNode* head) {
        
        
        ListNode* slow=head;
        ListNode* fast=head, *temp=head;
        while(fast && fast->next){
            slow=slow->next;
            fast=fast->next->next;
        }
        
        ListNode* prev=NULL,*curr=slow;
        
        while(curr){
            temp=curr->next;
            curr->next=prev;
            prev=curr;
            curr=temp;
        }
        
        ListNode *n1=head,*n2=prev;
        while(n2->next){
            temp=n1->next;
            n1->next=n2;
            n1=temp;
            
            temp=n2->next;
            n2->next=n1;
            n2=temp;
            
            
        }
        
    }
};
