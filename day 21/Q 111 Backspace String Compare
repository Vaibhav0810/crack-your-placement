Time-O(n)
Space-O(n) bcoz we used 2 stacks

bool backspaceCompare(string s, string t) {
        
        stack<char> s1,t1;
        
        for(int i=0;i<s.length();i++){
            if(s[i]=='#' && !s1.empty()){
                s1.pop();
            }
            else if(s[i]=='#' && s1.empty())
                continue;
            else{
                s1.push(s[i]);
            }
        }
        
          for(int i=0;i<t.length();i++){
            if(t[i]=='#' && !t1.empty()){
                t1.pop();
            }
            else if(t[i]=='#' && t1.empty())
                continue;
            else{
                t1.push(t[i]);
            }
        }
        
        if(s1==t1) return true;
        return false;
        
    }
    
    Time-O(n)
    Space-O(1)
    
    class Solution {
public:
    bool backspaceCompare(string s, string t) {
        
        int x=0,y=0;
        
        for(int i=0;i<s.length();i++){
            if(s[i]=='#'){
                x--;
                x=max(0,x);
            }
            else{
                s[x]=s[i];
                x++;
            }
        }
        
        
        
        for(int i=0;i<t.length();i++){
            if(t[i]=='#'){
                y--;
                y=max(0,y);
            }
            else{
                t[y]=t[i];
                y++;
            }
        }
        if(y!=x){
            return false;
        }
        else{
            for(int i=0;i<x;i++){
                if(s[i]!=t[i]){
                    return false;
                }
            }
        }
        return true;
        
        
    }
};
