Time- O(n^2);
Space-O(1);

class Solution {
public:
    ListNode* sortList(ListNode* head) {
        ListNode* temp=head;
        if(head==NULL){
            return NULL;
        }
        int count=0;
        while(temp){
            count++;
            temp=temp->next;
        }
        temp=head;
        while(count--){
        while(temp->next){
            if(temp->next->val<temp->val){
                int copy=temp->next->val;
                temp->next->val=temp->val;
                temp->val=copy;
            }
            temp=temp->next;
        }
            temp=head;
        }
        return head;
    }
};

Time- O(n log n)
Space- O(n)

class Solution {
public:
    ListNode* sortList(ListNode* head) {
        
        vector<int> v;
        
        ListNode* temp=head;
        
        while(temp){
            v.push_back(temp->val);
            temp=temp->next;
        }
        temp=head;
        
        sort(v.begin(),v.end());
        
        for(int i=0;i<v.size();i++){
            temp->val=v[i];
            temp=temp->next;
        }
        
        delete(temp);
        return head;
    }
};

Time- O(nlog n)
Space- O(1)

class Solution {
public:
    ListNode* sortList(ListNode* head) {
        
        if(head==NULL || head->next==NULL){
            return head;
        }
        
        ListNode* temp=NULL;
        ListNode* fast=head, *slow=head;
        
        while(fast && fast->next){
            temp=slow;
            fast=fast->next->next;
            slow=slow->next;
        }
        temp->next=NULL;
        ListNode* l1=sortList(head);
        ListNode* l2=sortList(slow);
        
        return mergelist(l1,l2);
        
    }
    
    ListNode* mergelist(ListNode* l1, ListNode* l2){
        ListNode* ptr=new ListNode(0);
        ListNode* curr=ptr;
        
        while(l1 && l2){
            if(l1->val<=l2->val){
                curr->next=l1;
                l1=l1->next;
            }
            else{
                curr->next=l2;
                l2=l2->next;
            }
            curr=curr->next;
        }
        
        if(l1!=NULL){
            curr->next=l1;
            l1=l1->next;
        }
        if(l2!=NULL){
            curr->next=l2;
            l2=l2->next;
        }
       
        return ptr->next;
    }
    
};
