Brute Force

  bool isPalindrome(ListNode* head) {
        
        vector<int>v;
        ListNode* temp=head;
        while(temp){
            v.push_back(temp->val);
            temp=temp->next;
        }
        int n=v.size();
        
        for(int i=0;i<n/2;i++){
            if(v[i]!=v[n-i-1]){
                return false;
            }
            
        }
        return true;
        
    }
    
 
 Optimised
 
 class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(head== NULL || head->next==NULL){
            return true;
        }
        ListNode* slow=head;
        ListNode* fast=head;
        
        while(fast->next!=NULL && fast->next->next!=NULL){ 
            slow=slow->next;
            fast=fast->next->next;
        }
        
        slow->next=reverse(slow->next);
        slow=slow->next;
        
        while(slow!=NULL){
            if(head->val!=slow->val)
                return false;
            head=head->next;
            slow=slow->next;
        }
        return true;
        
    }
    
    ListNode* reverse(ListNode* head){
        ListNode*pre =NULL;
        ListNode* next=NULL;
        
        while(head!=NULL){
            next=head->next;
            head->next=pre;
            pre=head;
            head=next;
        }
        return pre;
    }
    
};
    
